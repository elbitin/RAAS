//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elbitin.Applications.RAAS.RAASClient.RemoteSc.RAASServerServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
        "erService", ConfigurationName="RAASServerServiceRef.IRAASServerService", CallbackContract=typeof(Elbitin.Applications.RAAS.RAASClient.RemoteSc.RAASServerServiceRef.IRAASServerServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRAASServerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/Subscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/Subscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/Unsubscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/Unsubscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsXml", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsXmlResponse")]
        string GetShortcutsXml();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsXml", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsXmlResponse")]
        System.Threading.Tasks.Task<string> GetShortcutsXmlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShareXml", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShareXmlResponse")]
        string GetShareXml();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShareXml", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShareXmlResponse")]
        System.Threading.Tasks.Task<string> GetShareXmlAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetLoggedInState", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetLoggedInStateResponse")]
        bool GetLoggedInState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetLoggedInState", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetLoggedInStateResponse")]
        System.Threading.Tasks.Task<bool> GetLoggedInStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/LogOff", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/LogOffResponse")]
        bool LogOff();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/LogOff", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/LogOffResponse")]
        System.Threading.Tasks.Task<bool> LogOffAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetIcon", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetIconResponse")]
        byte[] GetIcon(string iconName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetIcon", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetIconResponse")]
        System.Threading.Tasks.Task<byte[]> GetIconAsync(string iconName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartEntries", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartEntriesResponse")]
        string[] GetAutostartEntries();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartEntries", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartEntriesResponse")]
        System.Threading.Tasks.Task<string[]> GetAutostartEntriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutIcon", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutIconResponse")]
        byte[] GetShortcutIcon(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutIcon", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutIconResponse")]
        System.Threading.Tasks.Task<byte[]> GetShortcutIconAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/Reboot", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/RebootResponse")]
        void Reboot();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/Reboot", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/RebootResponse")]
        System.Threading.Tasks.Task RebootAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetVersion", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetVersionResponse")]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetVersion", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetVersionResponse")]
        System.Threading.Tasks.Task<string> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsServerPath", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsServerPathResponse")]
        string GetShortcutsServerPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsServerPath", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetShortcutsServerPathResponse")]
        System.Threading.Tasks.Task<string> GetShortcutsServerPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetKeepAliveAgentPath", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetKeepAliveAgentPathResponse")]
        string GetKeepAliveAgentPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetKeepAliveAgentPath", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetKeepAliveAgentPathResponse")]
        System.Threading.Tasks.Task<string> GetKeepAliveAgentPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartPath", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartPathResponse")]
        string GetAutostartPath();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartPath", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/GetAutostartPathResponse")]
        System.Threading.Tasks.Task<string> GetAutostartPathAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/UpdateShortcuts", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/UpdateShortcutsResponse")]
        void UpdateShortcuts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/UpdateShortcuts", ReplyAction="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/UpdateShortcutsResponse")]
        System.Threading.Tasks.Task UpdateShortcutsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRAASServerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/ShortcutsXmlChange")]
        void ShortcutsXmlChange();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/ShareXmlChange")]
        void ShareXmlChange();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://applications.elbitin.com/WCF/RAASServer/1.0.0/RAASServer.RAASSvr.IRAASServ" +
            "erService/IRAASServerService/LoggedInChange")]
        void LoggedInChange();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRAASServerServiceChannel : Elbitin.Applications.RAAS.RAASClient.RemoteSc.RAASServerServiceRef.IRAASServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RAASServerServiceClient : System.ServiceModel.DuplexClientBase<Elbitin.Applications.RAAS.RAASClient.RemoteSc.RAASServerServiceRef.IRAASServerService>, Elbitin.Applications.RAAS.RAASClient.RemoteSc.RAASServerServiceRef.IRAASServerService {
        
        public RAASServerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RAASServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RAASServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RAASServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RAASServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public string GetShortcutsXml() {
            return base.Channel.GetShortcutsXml();
        }
        
        public System.Threading.Tasks.Task<string> GetShortcutsXmlAsync() {
            return base.Channel.GetShortcutsXmlAsync();
        }
        
        public string GetShareXml() {
            return base.Channel.GetShareXml();
        }
        
        public System.Threading.Tasks.Task<string> GetShareXmlAsync() {
            return base.Channel.GetShareXmlAsync();
        }
        
        public bool GetLoggedInState() {
            return base.Channel.GetLoggedInState();
        }
        
        public System.Threading.Tasks.Task<bool> GetLoggedInStateAsync() {
            return base.Channel.GetLoggedInStateAsync();
        }
        
        public bool LogOff() {
            return base.Channel.LogOff();
        }
        
        public System.Threading.Tasks.Task<bool> LogOffAsync() {
            return base.Channel.LogOffAsync();
        }
        
        public byte[] GetIcon(string iconName) {
            return base.Channel.GetIcon(iconName);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetIconAsync(string iconName) {
            return base.Channel.GetIconAsync(iconName);
        }
        
        public string[] GetAutostartEntries() {
            return base.Channel.GetAutostartEntries();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAutostartEntriesAsync() {
            return base.Channel.GetAutostartEntriesAsync();
        }
        
        public byte[] GetShortcutIcon(string path) {
            return base.Channel.GetShortcutIcon(path);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetShortcutIconAsync(string path) {
            return base.Channel.GetShortcutIconAsync(path);
        }
        
        public void Reboot() {
            base.Channel.Reboot();
        }
        
        public System.Threading.Tasks.Task RebootAsync() {
            return base.Channel.RebootAsync();
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public string GetShortcutsServerPath() {
            return base.Channel.GetShortcutsServerPath();
        }
        
        public System.Threading.Tasks.Task<string> GetShortcutsServerPathAsync() {
            return base.Channel.GetShortcutsServerPathAsync();
        }
        
        public string GetKeepAliveAgentPath() {
            return base.Channel.GetKeepAliveAgentPath();
        }
        
        public System.Threading.Tasks.Task<string> GetKeepAliveAgentPathAsync() {
            return base.Channel.GetKeepAliveAgentPathAsync();
        }
        
        public string GetAutostartPath() {
            return base.Channel.GetAutostartPath();
        }
        
        public System.Threading.Tasks.Task<string> GetAutostartPathAsync() {
            return base.Channel.GetAutostartPathAsync();
        }
        
        public void UpdateShortcuts() {
            base.Channel.UpdateShortcuts();
        }
        
        public System.Threading.Tasks.Task UpdateShortcutsAsync() {
            return base.Channel.UpdateShortcutsAsync();
        }
    }
}
