//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elbitin.Applications.RAAS.RAASClient.ServerCfg.RAASClientServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
        "lientService", ConfigurationName="RAASClientServiceRef.IRAASClientService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRAASClientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartRemoteApplication", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartRemoteApplicationResponse")]
        void StartRemoteApplication(string application, string arguments, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/ConnectServer", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/ConnectServerResponse")]
        void ConnectServer(string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/DisconnectServer", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/DisconnectServerResponse")]
        void DisconnectServer(string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/GetServerStatus", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/GetServerStatusResponse")]
        int GetServerStatus(string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/GetServerVersion", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/GetServerVersionResponse")]
        string GetServerVersion(string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartAutostart", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartAutostartResponse")]
        void StartAutostart(string arguments, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartShortcutsServer", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartShortcutsServerResponse")]
        void StartShortcutsServer(string arguments, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartKeepAlive", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/1.0.0/RAASClient.RAASClient.IRAASC" +
            "lientService/IRAASClientService/StartKeepAliveResponse")]
        void StartKeepAlive(string arguments, string serverName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRAASClientServiceChannel : Elbitin.Applications.RAAS.RAASClient.ServerCfg.RAASClientServiceRef.IRAASClientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RAASClientServiceClient : System.ServiceModel.ClientBase<Elbitin.Applications.RAAS.RAASClient.ServerCfg.RAASClientServiceRef.IRAASClientService>, Elbitin.Applications.RAAS.RAASClient.ServerCfg.RAASClientServiceRef.IRAASClientService {
        
        public RAASClientServiceClient() {
        }
        
        public RAASClientServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RAASClientServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RAASClientServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RAASClientServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartRemoteApplication(string application, string arguments, string serverName) {
            base.Channel.StartRemoteApplication(application, arguments, serverName);
        }
        
        public void ConnectServer(string serverName) {
            base.Channel.ConnectServer(serverName);
        }
        
        public void DisconnectServer(string serverName) {
            base.Channel.DisconnectServer(serverName);
        }
        
        public int GetServerStatus(string serverName) {
            return base.Channel.GetServerStatus(serverName);
        }
        
        public string GetServerVersion(string serverName) {
            return base.Channel.GetServerVersion(serverName);
        }
        
        public void StartAutostart(string arguments, string serverName) {
            base.Channel.StartAutostart(arguments, serverName);
        }
        
        public void StartShortcutsServer(string arguments, string serverName) {
            base.Channel.StartShortcutsServer(arguments, serverName);
        }
        
        public void StartKeepAlive(string arguments, string serverName) {
            base.Channel.StartKeepAlive(arguments, serverName);
        }
    }
}
