//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elbitin.Applications.RAAS.RAASClient.RAASClient.RemoteAppsServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
        "eAppsService", ConfigurationName="RemoteAppsServiceRef.IRemoteAppsService", CallbackContract=typeof(Elbitin.Applications.RAAS.RAASClient.RAASClient.RemoteAppsServiceRef.IRemoteAppsServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IRemoteAppsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Subscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Subscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Unsubscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Unsubscribe", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/StartRemoteApplication", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/StartRemoteApplicationResponse")]
        void StartRemoteApplication(string application, string arguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/StartRemoteApplication", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/StartRemoteApplicationResponse")]
        System.Threading.Tasks.Task StartRemoteApplicationAsync(string application, string arguments);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Connect", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/ConnectResponse")]
        void Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Connect", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/ConnectResponse")]
        System.Threading.Tasks.Task ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Disconnect", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/DisconnectResponse")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Disconnect", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/GetStatus", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/GetStatusResponse")]
        int GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/GetStatus", ReplyAction="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/GetStatusResponse")]
        System.Threading.Tasks.Task<int> GetStatusAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteAppsServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://applications.elbitin.com/WCF/RAASClient/2.0.0/RAASClient.RemoteApps.IRemot" +
            "eAppsService/IRemoteAppsService/Connected")]
        void Connected();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteAppsServiceChannel : Elbitin.Applications.RAAS.RAASClient.RAASClient.RemoteAppsServiceRef.IRemoteAppsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteAppsServiceClient : System.ServiceModel.DuplexClientBase<Elbitin.Applications.RAAS.RAASClient.RAASClient.RemoteAppsServiceRef.IRemoteAppsService>, Elbitin.Applications.RAAS.RAASClient.RAASClient.RemoteAppsServiceRef.IRemoteAppsService {
        
        public RemoteAppsServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RemoteAppsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RemoteAppsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteAppsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteAppsServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public void StartRemoteApplication(string application, string arguments) {
            base.Channel.StartRemoteApplication(application, arguments);
        }
        
        public System.Threading.Tasks.Task StartRemoteApplicationAsync(string application, string arguments) {
            return base.Channel.StartRemoteApplicationAsync(application, arguments);
        }
        
        public void Connect() {
            base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public int GetStatus() {
            return base.Channel.GetStatus();
        }
        
        public System.Threading.Tasks.Task<int> GetStatusAsync() {
            return base.Channel.GetStatusAsync();
        }
    }
}
